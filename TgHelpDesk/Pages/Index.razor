@page "/Panel"
@using Microsoft.EntityFrameworkCore
@using TgHelpDesk.Repositories.Interface
@using TgHelpDesk.Services.Bot
@using static TgHelpDesk.Models.Core.HelpRequest
@inject DialogService DialogService
@inject IRepository<HelpRequest> HelpReqRepos;
@inject IRepository<TelegramUser> TgUserRepos;
@inject BotMethods _botMethods;

<PageTitle>Панель</PageTitle>
<RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Добавить запись" Click="@InsertRow" Disabled=@(requestToInsert != null || requestToUpdate != null) />
<RadzenDataGrid TItem="HelpRequest" Data="@requests" AllowFiltering="true" FilterMode="FilterMode.Advanced" AllowSorting="true" AllowVirtualization="true" EditMode="DataGridEditMode.Single"
             RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" @ref="requestsGrid" RowDoubleClick="@(x=>ShowInlineDialog(x.Data))">
    <Columns>
        <RadzenDataGridColumn TItem="HelpRequest" Property="Id" Width="100px" Frozen="true" Title="ID" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="HelpRequest" Property="TelegramUser" Title="Имя" Width="200px" TextAlign="TextAlign.Center">
            <Template Context="request">
                @request.TelegramUser.Name (@request.TelegramUser.TgUsername)
            </Template>
            <EditTemplate Context="request">
                <RadzenDropDown @bind-Value="request.TelegramUser" Data="@telegramUsers" Style="width:100%; display: block;">
                    <Template>
                        @context.Id @context.Name @context.TgUsername
                    </Template>
                </RadzenDropDown>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="HelpRequest" Property="Title" Title="Название" Width="200px" TextAlign="TextAlign.Center">
            <EditTemplate Context="helpRequest">
                <RadzenTextBox @bind-Value="helpRequest.Title" Style="width:100%; display: block" Name="Title" />
                <RadzenRequiredValidator Text="Название требуется" Component="Title" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="HelpRequest" Property="Text" Title="Текст">
            <EditTemplate Context="helpRequest">
                <RadzenTextBox @bind-Value="helpRequest.Text" Style="width:100%; display: block" Name="Text" />
                <RadzenRequiredValidator Text="Текст требуется" Component="Text" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="HelpRequest" Property="CreationDateTime" Title="Дата">
            <EditTemplate Context="helpRequest">
                <RadzenDatePicker @bind-Value=@helpRequest.CreationDateTime Style="width:100%; display: block" Name="Date" />
                <RadzenRequiredValidator Text="Дата требуется" Component="Date" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="HelpRequest" Property="Priority" Title="Приоритет">
            <Template Context="request">
                @GetPriority(request.Priority)
            </Template>
            <EditTemplate Context="request">
                <RadzenDropDown @bind-Value="request.Priority" Data="HelpRequestRadzenData.PriorityList" ValueProperty="Pd" Style="width:100%; display: block;" TextProperty="Title" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="HelpRequest" Property="Status" Title="Статус">
            <Template Context="request">
                @GetStatus(request.Status)
            </Template>
            <EditTemplate Context="request">
                <RadzenDropDown @bind-Value="request.Status" Data="HelpRequestRadzenData.StatusList" ValueProperty="Pd" Style="width:100%; display: block;" TextProperty="Title" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="HelpRequest" Context="request" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Frozen="true" FrozenPosition="FrozenColumnPosition.Right" Width="150px">
            <Template Context="request">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(request))" @onclick:stopPropagation="true"/>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(request))" @onclick:stopPropagation="true"/>
            </Template>
            <EditTemplate Context="request">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(request))"/>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(request))"/>
@*                 <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(request))"/> *@
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code{
    RadzenDataGrid<HelpRequest> requestsGrid;
    IEnumerable<HelpRequest> requests;
    IEnumerable<TelegramUser> telegramUsers;

    HelpRequest? requestToInsert;
    HelpRequest? requestToUpdate;

    void Reset()
    {
        requestToInsert = null;
        requestToUpdate = null;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        requests = HelpReqRepos.AsEnumerable();
        telegramUsers = TgUserRepos.AsEnumerable();

        Console.WriteLine("Started");
    }

    async Task InsertRow()
    {
        requestToInsert = new HelpRequest();
        await requestsGrid.InsertRow(requestToInsert);
    }
    async Task EditRow(HelpRequest req)
    {
        requestToUpdate = req;
        await requestsGrid.EditRow(requestToUpdate);
    }

    void CancelEdit(HelpRequest req)
    {
        Reset();

        requestsGrid.CancelEditRow(req);

        var orderEntry = HelpReqRepos.Entry(req);
        if (orderEntry.State == EntityState.Modified)
        {
            orderEntry.CurrentValues.SetValues(orderEntry.OriginalValues);
            orderEntry.State = EntityState.Unchanged;
        }
    }
    async Task SaveRow(HelpRequest req)
    {
        await requestsGrid.UpdateRow(req);
    }

    //////////////////////////////////////////////

    void OnCreateRow(HelpRequest req)
    {
        Reset();
        HelpReqRepos.Create(req);
    }
    void OnUpdateRow(HelpRequest req)
    {
        Reset();
        HelpReqRepos.Update(req);
    }
    async Task DeleteRow(HelpRequest req)
    {
        Reset();

        if (requests.Contains(req))
        {
            HelpReqRepos.Delete(req.Id);
            await requestsGrid.Reload();
        }
        else
        {
            requestsGrid.CancelEditRow(req);
            await requestsGrid.Reload();
        }
    }

    //////////////////////////////////////////////

    async Task ShowInlineDialog(HelpRequest request)
    {
        var Title = "Название:" + request.Title;
        var result = await DialogService.OpenAsync(Title, ds =>
        @<RadzenStack>
            <RadzenText TextStyle="TextStyle.H5" class="rz-color-on-primary-light" TextAlign=TextAlign.Center><strong>@request.Title</strong></RadzenText>
            <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Отправитель</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@request.TelegramUser.Name (@request.TelegramUser.TgUsername)</b></RadzenText>
            <hr />
            <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Описание</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@(request.Text)</b></RadzenText>
            <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Дата Создания</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@(request.CreationDateTime)</b></RadzenText>
            <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Статус</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@(HelpRequest.GetStatus(request.Status))</b></RadzenText>
            <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Приоритет</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@(HelpRequest.GetPriority(request.Priority))</b></RadzenText>
         </RadzenStack>,
        new DialogOptions()
        {
            CloseDialogOnEsc = true,
            CloseDialogOnOverlayClick = true,
            ShowClose = false,
            ShowTitle = false,
            Draggable = false,
            Height = "auto",
            Width = "600px",
            CssClass = "rz-background-color-primary-light"
        });
    }
}